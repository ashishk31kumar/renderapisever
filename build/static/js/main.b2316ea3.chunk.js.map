{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","onclick","item","brandNameArray","brands_name","split","setState","click","dropitem","index","state","apiResponse","axios","get","then","res","data","this","callAPI","arrData","className","undefined","length","map","class","type","onClick","src","icon_url","inde","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,kC,wKCsE5BC,E,kDAhEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,QAAU,SAACC,GACT,IAAIC,EACJA,EAAiBD,EAAKA,KAAKE,YAAYC,MAAM,KAC7C,EAAKC,SAAS,CAAEC,OAAO,EAAMC,SAAUL,EAAgBM,MAAOP,EAAKO,SANnE,EAAKC,MAAQ,CAAEC,YAAa,GAAIJ,OAAO,EAAOC,SAAU,IAFvC,E,sDAYR,IAAD,OAERI,IAAMC,IADI,iEAERC,MAAK,SAAAC,GACL,EAAKT,SAAS,CAAEK,YAAaI,EAAIC,Y,0CAKnCC,KAAKC,Y,+BAEG,IAAD,OACHC,EAAUF,KAAKP,MAAMC,YAAYK,KACrC,OACE,yBAAKI,UAAU,OAEb,6BACA,6BACA,kCAEcC,GAAXF,GAAwBA,EAAQG,OAAS,GAAKH,EAAQI,KAAI,SAACrB,EAAMO,GAAP,OACzD,4BACE,yBAAKe,MAAM,YACT,4BAAQA,MAAM,kCAAkCC,KAAK,SAASC,QAAS,kBAAM,EAAKzB,QAAQ,CAAEC,OAAMO,YAAU,yBAAKkB,IAAKzB,EAAK0B,WACzH,0BAAMJ,MAAM,WACO,GAApB,EAAKd,MAAMH,OAAiBE,GAAS,EAAKC,MAAMD,MAC/C,wBAAIe,MAAM,iBACP,EAAKd,MAAMF,SAASc,OAAS,GAAK,EAAKZ,MAAMF,SAASe,KAAI,SAACrB,EAAM2B,GAAP,OACzD,yBAAKT,UAAS,UAAKS,EAAO,GAAK,EAAI,WAAa,GAAlC,qBACZ,yBAAKT,UAAU,YACb,2BAAIlB,SAQV,gB,GAnDF4B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b2316ea3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { apiResponse: {}, click: false, dropitem: [] };\n\n  }\n  onclick = (item) => {\n    let brandNameArray = []\n    brandNameArray = item.item.brands_name.split(\",\");\n    this.setState({ click: true, dropitem: brandNameArray, index: item.index })\n  } \n\n\n  callAPI() {\n    let url = 'https://api.gyftr.net/smartbuyapi/hdfc/api/v1/home/categories'\n    axios.get(url)\n     .then(res=>{\n      this.setState({ apiResponse: res.data})\n     })\n  }\n\n  componentDidMount() {\n    this.callAPI();\n  }\n  render() {\n    var arrData = this.state.apiResponse.data\n    return (\n      <div className=\"App\">\n\n        <br />\n        <br />\n        <div>\n\n          {arrData != undefined && arrData.length > 0 && arrData.map((item, index) => (\n            <td>\n              <div class=\"dropdown\">\n                <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" onClick={() => this.onclick({ item, index })}><img src={item.icon_url} />\n                  <span class=\"caret\"></span></button>\n                {this.state.click == true && index == this.state.index ?\n                  <ul class=\"dropdown-menu\">\n                    {this.state.dropitem.length > 0 && this.state.dropitem.map((item, inde) => (\n                      <div className={`${inde % 4 == 0 ? \"clearfix\" : \"\"} col-md-3 margin`}>\n                        <div className=\"boxModel\">\n                          <p>{item}</p>\n                        </div>\n\n                      </div>\n                    ))}\n\n\n                  </ul>\n                  : null}\n              </div>\n            </td>\n\n\n\n          ))}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}